using System;
using Savidiy.Utils;
using SettingsModule;
using UnityEngine;

namespace MainModule
{
    public class PlayerInvulnerability : IDisposable
    {
        private readonly TickInvoker _tickInvoker;
        private SpriteRenderer _spriteRenderer;
        private readonly GameStaticData _gameStaticData;

        private float _invulnerableTimer;
        private float _blinkTimer;

        public bool IsInvulnerable => _invulnerableTimer > 0;

        public PlayerInvulnerability(TickInvoker tickInvoker, GameStaticData gameStaticData)
        {
            _tickInvoker = tickInvoker;
            _gameStaticData = gameStaticData;
            _tickInvoker.Updated += OnUpdated;
        }

        public void SetSpriteRenderer(SpriteRenderer spriteRenderer)
        {
            _spriteRenderer = spriteRenderer;
        }

        public void StartInvulnerableTimer()
        {
            _invulnerableTimer = _gameStaticData.HitInvulDuration;
            _blinkTimer = _gameStaticData.BlinkPeriod;
        }

        private void OnUpdated()
        {
            float deltaTime = _tickInvoker.DeltaTime;

            if (_invulnerableTimer <= 0)
                return;

            _invulnerableTimer -= deltaTime;
            UpdateBlink(deltaTime);
        }

        private void UpdateBlink(float deltaTime)
        {
            Color color = Color.white;
            if (_invulnerableTimer > 0)
            {
                _blinkTimer -= deltaTime;
                if (_blinkTimer < 0)
                    _blinkTimer = _gameStaticData.BlinkPeriod;

                if (_blinkTimer > _gameStaticData.BlinkPeriod / 2)
                    color = Color.clear;
            }

            _spriteRenderer.color = color;
        }

        public void Dispose()
        {
            _tickInvoker.Updated -= OnUpdated;
        }
    }
}